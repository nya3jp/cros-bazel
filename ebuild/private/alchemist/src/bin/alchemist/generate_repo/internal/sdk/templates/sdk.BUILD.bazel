load("@//bazel/ebuild:defs.bzl", "sdk", "sdk_update", "overlay_set", "package_set")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("@rules_pkg//pkg:mappings.bzl", "pkg_attributes", "pkg_filegroup", "pkg_files", "pkg_mkdirs", "pkg_mklink", "strip_prefix")

pkg_files(
    name = "make_conf_board",
    srcs = [
        "make.conf.board",
        "make.conf.board_setup",
    ],
    strip_prefix = strip_prefix.from_pkg(),
)

pkg_mklink(
    name = "make_conf",
    link_name = "make.conf",
    target = "/mnt/host/source/src/third_party/chromiumos-overlay/chromeos/config/make.conf.generic-target",
)

pkg_mklink(
    name = "make_conf_user",
    link_name = "make.conf.user",
    target = "/etc/make.conf.user",
)

pkg_mklink(
    name = "portage_make_profile",
    link_name = "portage/make.profile",
    target = "{{ profile_path }}",
)

pkg_filegroup(
    name = "etc",
    prefix = "build/{{ board }}/etc",
    srcs = [
        ":make_conf",
        ":make_conf_board",
        ":make_conf_user",
        ":portage_make_profile",
    ],
)

# Create /usr/share/aclocal to make autoconf work.
# TODO: Figure out why this is needed.
pkg_mkdirs(
    name = "aclocal",
    dirs = ["build/{{ board }}/usr/share/aclocal"],
)

pkg_files(
    name = "wrappers_build_bin",
    srcs = [
        {%- for name in wrappers %}
        "{{ name }}",
        {%- endfor %}
    ],
    strip_prefix = strip_prefix.from_pkg(),
    prefix = "build/{{ board }}/build/bin",
    attributes = pkg_attributes(
        mode = "0755",
    ),
)

pkg_files(
    name = "wrappers_usr_local_bin",
    srcs = [
        {%- for name in wrappers %}
        "{{ name }}",
        {%- endfor %}
    ],
    renames = {
        {%- for name in wrappers %}
        "{{ name }}": "{{ name }}-{{ board }}",
        {%- endfor %}
    },
    strip_prefix = strip_prefix.from_pkg(),
    prefix = "usr/local/bin",
    attributes = pkg_attributes(
        mode = "0755",
    ),
)

pkg_tar(
    name = "board_extra_tarball",
    srcs = [
        ":aclocal",
        ":etc",
        ":wrappers_build_bin",
        ":wrappers_usr_local_bin",
    ],
    extension = "tar.gz",
)

overlay_set(
    name = "overlays",
    overlays = [
        {%- for overlay in overlays %}
        "{{ overlay }}",
        {%- endfor %}
    ],
)

package_set(
    name = "cross-packages",
    deps = [
        {% for triple in triples -%}
        "@//bazel/prebuilts/amd64-host/cross-{{ triple }}:binutils",
        {% if triple == "aarch64-cros-linux-gnu" or triple == "armv7a-cros-linux-gnueabihf" -%}
        "@//bazel/prebuilts/amd64-host/cross-{{ triple }}:compiler-rt",
        {% endif -%}
        "@//bazel/prebuilts/amd64-host/cross-{{ triple }}:gcc",
        "@//bazel/prebuilts/amd64-host/cross-{{ triple }}:gdb",
        "@//bazel/prebuilts/amd64-host/cross-{{ triple }}:glibc",
        "@//bazel/prebuilts/amd64-host/cross-{{ triple }}:go",
        "@//bazel/prebuilts/amd64-host/cross-{{ triple }}:libcxx",
        "@//bazel/prebuilts/amd64-host/cross-{{ triple }}:libxcrypt",
        "@//bazel/prebuilts/amd64-host/cross-{{ triple }}:linux-headers",
        "@//bazel/prebuilts/amd64-host/cross-{{ triple }}:llvm-libunwind",
        {%- endfor %}
    ],
    visibility = [
        "@//:__pkg__",  # for build_image targets
    ],
)

sdk(
    name = "base",
    base = "@//bazel/sdk:base_sdk",
    # TODO: Maybe split installing the host deps from installing the board
    # specific items.
    board = "{{ board }}",
    extra_tarballs = [
        "@//bazel/sdk:extra_tarball",
        ":board_extra_tarball",
    ],
    host_deps = [
        ":cross-packages",
        "@//bazel/prebuilts/amd64-host/dev-embedded:coreboot-sdk",
        "@//bazel/prebuilts/amd64-host/dev-embedded:hps-sdk",
        "@//bazel/prebuilts/amd64-host/dev-lang:rust",
    ] + select({
        "@//bazel/sdk:new-sdk-enabled": [],
        "//conditions:default": [
            "@//bazel/prebuilts/amd64-host/app-text:docbook-xml-dtd-4_4",
            "@//bazel/prebuilts/amd64-host/dev-util:meson-format-array",
            "@//bazel/prebuilts/amd64-host/x11-base:xcb-proto",
        ],
    }),
    overlays = ":overlays",
    visibility = ["//:__subpackages__"],
)

sdk_update(
    name = "sdk",
    base = ":base",
    target_deps = [
        "//sys-kernel/linux-headers",
        "//sys-libs/gcc-libs",
        "//sys-libs/libcxx",
        "//sys-libs/llvm-libunwind",
    ],
    visibility = [
        "//:__subpackages__",
        # For @//:build_image_demo.
        # TODO: Remove this.
        "@//:__pkg__",
    ],
)
