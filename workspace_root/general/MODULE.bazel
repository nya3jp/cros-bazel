# Copyright 2023 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# We don't need to name our module, but the default is __main__, which isn't
# very meaningful.
module(
    name = "cros",
    version = "0.1",
)

# Language independent stuff.
bazel_dep(name = "bazel_skylib", version = "1.4.0")
bazel_dep(name = "gazelle", version = "0.29.0")
bazel_dep(name = "platforms", version = "0.0.5")
bazel_dep(name = "protobuf", version = "21.7")
bazel_dep(name = "rules_foreign_cc", version = "0.9.0")
bazel_dep(name = "rules_pkg", version = "0.7.0")
bazel_dep(name = "rules_proto", version = "5.3.0-21.7")
bazel_dep(name = "zlib", version = "1.2.13")

# Hermetic toolchains.
toolchains = use_extension("//bazel/module_extensions/toolchains:extension.bzl", "toolchains")
use_repo(
    toolchains,
    "toolchain_sdk",
    "toolchain_sdk_tarball",
)

register_toolchains("@toolchain_sdk//:all")

# Go support
GO_VERSION = "1.18.3"

bazel_dep(name = "rules_go", version = "0.38.1")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(
    name = "go_sdk",
    version = GO_VERSION,
)
use_repo(go_sdk, "go_sdk_toolchains")

register_toolchains("@go_sdk_toolchains//:all")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//bazel:go.mod")

# This should contain all direct deps listed in go.mod.
# For now, it needs to be manually maintained, but work is being done to
# automate this (https://github.com/bazelbuild/bazel/issues/17048).
use_repo(
    go_deps,
    "cc_mvdan_sh_v3",
    "com_github_alecthomas_participle_v2",
    "com_github_alessio_shellescape",
    "com_github_elastic_go_seccomp_bpf",
    "com_github_google_go_cmp",
    "com_github_klauspost_compress",
    "com_github_urfave_cli_v2",
    "org_golang_google_grpc",
    "org_golang_google_protobuf",
    "org_golang_x_net",
    "org_golang_x_sys",
)

# Python support
PY_VERSION = "3.10.8"

bazel_dep(name = "rules_python", version = "0.18.0")

python = use_extension("@rules_python//python:extensions.bzl", "python")
python.toolchain(
    name = "python%s" % PY_VERSION,
    python_version = PY_VERSION,
)

PY_INTERPRETER_REPO = "python%s_x86_64-unknown-linux-gnu" % PY_VERSION

use_repo(
    python,
    "python%s_toolchains" % PY_VERSION,
    python_interpreter = PY_INTERPRETER_REPO,
)

register_toolchains("@python%s_toolchains//:all" % PY_VERSION)

pip = use_extension("@rules_python//python:extensions.bzl", "pip")
pip.parse(
    name = "pip",
    python_interpreter_target = "@python_interpreter//:python",
    requirements_lock = "//rules_cros/toolchains/python:requirements_lock.txt",
)
use_repo(pip, "pip")

# Rust support
bazel_dep(name = "rules_rust", version = "0.20.1")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(edition = "2021")
use_repo(
    rust,
    "rust_host_tools",
    "rust_toolchains",
)

# Ordering matters here. Placing our our toolchains first gives them priority.
# This means we only fall back to @rust_toolchains if our toolchains don't meet
# their target_settings.
register_toolchains("//bazel/module_extensions/toolchains/rust:all")

register_toolchains("@rust_toolchains//:all")

# Eventually this will be merged with metallurgy crates.
crate = use_extension("@rules_rust//rust:extensions.bzl", "crate")
crate.from_cargo(
    annotation_files = [
        "//rules_cros/toolchains/rust/alchemy_crates:annotations.json",
    ],
    cargo_lockfile = "//rules_cros/toolchains/rust/alchemy_crates:Cargo.lock",
    manifests = ["//rules_cros/toolchains/rust/alchemy_crates:Cargo.toml"],
    suffix = "alchemy",
)
use_repo(
    crate,
    # Rename it from <module_name>_crates to crates
    alchemy_crates = "cros_crates_alchemy",
)

files = use_extension("//bazel/module_extensions:files/extension.bzl", "files")
use_repo(files, "files")

cros_deps = use_extension("//bazel/module_extensions/cros_deps:extension.bzl", "cros_deps")
use_repo(cros_deps, "chromite", "depot_tools", "zstd")

pre_portage = use_extension("//bazel/module_extensions/portage:extension.bzl", "pre_portage")
use_repo(pre_portage, "alchemist", "portage_digest", "portage_tarball")

portage = use_extension("//bazel/module_extensions/portage:extension.bzl", "portage")
use_repo(portage, "portage", "portage_deps")
