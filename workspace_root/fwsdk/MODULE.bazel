# Copyright 2024 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Use the name "cros" because that'll make it easier to merge the module files
# down the line.
module(
    name = "cros",
    version = "0.1",
)

# Language independent stuff.
bazel_dep(name = "bazel_skylib", version = "1.7.1")

# Python support
PY_VERSION = "3.10"

bazel_dep(name = "rules_python", version = "0.31.0")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = PY_VERSION,
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "zephyr_py_deps",
    python_version = PY_VERSION,
    requirements_lock = "//platform/rules_cros_firmware/cros_firmware:zephyr-requirements-lock.txt",
)
pip.parse(
    hub_name = "hdctools_py_deps",
    python_version = PY_VERSION,
    requirements_lock = "//platform/rules_cros_firmware/cros_firmware:hdctools-requirements-lock.txt",
)
use_repo(pip, "hdctools_py_deps", "zephyr_py_deps")

# Rust support
bazel_dep(name = "rules_rust", version = "0.20.1")
local_path_override(
    module_name = "rules_rust",
    path = "../bazel_deps/rules_rust",
)

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    extra_target_triples = ["riscv32imc-unknown-none-elf"],
    versions = ["1.70.0"],
)

register_toolchains("//platform/ti50/common/toolchain:all")

use_repo(
    rust,
    "rust_toolchains",
)

register_toolchains("@rust_toolchains//:all")

fwsdk_deps = use_extension("//platform/rules_cros_firmware/cros_firmware:deps.bzl", "fwsdk_deps")
use_repo(
    fwsdk_deps,
    "cmsis",
    "compiler-builtins",
    "coreboot_sdk",
    "cr50-utils-deps",
    "cros-sdk",
    "depot_tools",
    "ec",
    "ec_devutils",
    "hdctools",
    "shflags",
    "ti50-sdk",
    "u_boot",
    "zephyr",
)
