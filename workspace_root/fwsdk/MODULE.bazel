# Copyright 2024 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Use the name "cros" because that'll make it easier to merge the module files
# down the line.
module(
    name = "cros",
    version = "0.1",
)

# Language independent stuff.
bazel_dep(name = "bazel_skylib", version = "1.4.2")
bazel_dep(name = "platforms", version = "0.0.9")

# Python support
PY_VERSION = "3.10"

bazel_dep(name = "rules_python", version = "0.31.0")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = PY_VERSION,
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "zephyr_py_deps",
    python_version = PY_VERSION,
    requirements_lock = "//platform/rules_cros_firmware/cros_firmware:zephyr-requirements-lock.txt",
)
pip.parse(
    hub_name = "hdctools_py_deps",
    python_version = PY_VERSION,
    requirements_lock = "//platform/rules_cros_firmware/cros_firmware:hdctools-requirements-lock.txt",
)
use_repo(pip, "hdctools_py_deps", "zephyr_py_deps")

# Rust support
bazel_dep(name = "rules_rust", version = "0.20.1")
local_path_override(
    module_name = "rules_rust",
    path = "../bazel_deps/rules_rust",
)

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    extra_target_triples = ["riscv32imc-unknown-none-elf"],
    versions = ["1.66.1"],
)
rust.host_tools(
    edition = "2021",
    version = "1.77.0",
)

register_toolchains("//platform/ti50/common/toolchain:dauntless_rust")

# Eventually this will be merged with metallurgy crates.
crate = use_extension(
    "@rules_rust//crate_universe:extension.bzl",
    "crate",
    isolate = True,
)
crate.from_cargo(
    name = "ti50_rust_deps",
    cargo_lockfile = "//platform/ti50/common:toolchain/no_std_deps/Cargo.lock",
    manifests = [
        "//platform/ti50/common:toolchain/no_std_deps/Cargo.toml",
    ],
    supported_platform_triples = [
        "riscv32imc-unknown-none-elf",
        "x86_64-unknown-linux-gnu",
    ],
)
crate.from_cargo(
    name = "ti50_std_rust_deps",
    cargo_lockfile = "//platform/ti50/common:toolchain/std_deps/Cargo.lock",
    manifests = [
        "//platform/ti50/common:toolchain/std_deps/Cargo.toml",
    ],
    supported_platform_triples = [
        "riscv32imc-unknown-none-elf",
        "x86_64-unknown-linux-gnu",
    ],
)
use_repo(crate, "ti50_rust_deps", "ti50_std_rust_deps")

fwsdk_deps = use_extension("//platform/rules_cros_firmware/cros_firmware:deps.bzl", "fwsdk_deps")
use_repo(
    fwsdk_deps,
    "compiler-builtins",
    "coreboot_sdk",
    "cros-sdk",
    "depot_tools",
    "ec_devutils",
    "shflags",
    "ti50-sdk",
)
