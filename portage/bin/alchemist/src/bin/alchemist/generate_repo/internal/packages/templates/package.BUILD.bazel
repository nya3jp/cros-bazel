# Copyright 2023 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
{% if failures %}
load("@//bazel/build_defs:always_fail.bzl", "always_fail")
{%- endif %}
load("@//bazel/cros_pkg/private:direct_ebuild.bzl", "direct_ebuild")
load("@//bazel/portage/build_defs:binary_package.bzl", "replace_runtime_deps")
load("@//bazel/portage/build_defs:ebuild.bzl", "ebuild", "ebuild_debug", "ebuild_install", "ebuild_install_list", "ebuild_test", "ebuild_compare_package_test")
load("@//bazel/portage/build_defs:package_set.bzl", "package_set")
load("@//bazel/portage/build_defs:sdk.bzl", "sdk_install_deps")
load("@bazel_skylib//rules:common_settings.bzl", "string_flag")

{%- macro ebuild_args(ebuild, suffix="", sdk_suffix="_deps") -%}
    ebuild = "{{ ebuild.ebuild_name }}",
    overlay = "{{ ebuild.overlay }}",
    category = "{{ebuild.category}}",
    package_name = "{{ ebuild.package_name }}",
    version = "{{ ebuild.version }}",
    slot = "{{ ebuild.slot }}",
    distfiles = {
        {%- for dist in ebuild.dists %}
        "@portage_deps//:{{ dist.name }}": "{{ dist.filename }}",
        {%- endfor %}
    },
    {%- if ebuild.sources %}
    srcs = [
        {%- for source in ebuild.sources %}
        "{{ source }}",
        {%- endfor %}
    ],
    {%- endif %}
    {%- if ebuild.git_trees %}
    git_trees = [
        {%- for git_tree in ebuild.git_trees %}
        "{{ git_tree }}",
        {%- endfor %}
    ],
    {%- endif %}
    {%- if ebuild.runtime_deps or ebuild.provided_runtime_deps %}
    runtime_deps = [
        {%- if ebuild.provided_runtime_deps %}
        # The following packages are provided by the SDK:
            {%- for dep in ebuild.provided_runtime_deps %}
        # * {{ dep }}
            {%- endfor %}
        {%- endif %}
        {%- for dep in ebuild.runtime_deps %}
        "{{ dep }}",
        {%- endfor %}
    ],
    {%- endif %}
    {%- if ebuild.host_install_deps %}
    install_deps = [
        {%- for dep in ebuild.host_install_deps %}
        "{{ dep }}",
        {%- endfor %}
    ],
    {%- endif %}
    use_flags = [
        {%- for flag in ebuild.uses %}
        "{{ flag }}",
        {%- endfor %}
    ],
    inject_use_flags = select({
        "@//bazel/portage:alchemist-use-flags": True,
        "@//bazel/portage:portage-use-flags": False,
    }),
    files = glob(["files/**", "*.bashrc"]),
    {%- if target_board %}
    board = "{{ target_board }}",
    {%- endif %}
    sdk = ":{{ ebuild.version }}{{ sdk_suffix }}",
    overlays = "{{ target_overlay_set }}",
    eclasses = [
        {%- for eclass in ebuild.eclasses %}
        "{{ eclass }}",
        {%- endfor %}
    ],
    {%- if ebuild.allow_network_access %}
    # This ebuild declares RESTRICT="network-sandbox".
    allow_network_access = True,
    {%- endif %}
{%- endmacro -%}

{%- for ebuild in ebuilds %}
{% if ebuild.direct_build_target -%}
direct_ebuild(
    name = "{{ ebuild.version }}",
    package = "{{ ebuild.direct_build_target }}",
    category = "{{ ebuild.category }}",
    package_name = "{{ ebuild.package_name }}",
    version = "{{ ebuild.version }}",
    slot = "{{ ebuild.slot }}",
    {%- if ebuild.runtime_deps or ebuild.provided_runtime_deps %}
    runtime_deps = [
        {%- if ebuild.provided_runtime_deps %}
        # The following packages are provided by the SDK:
            {%- for dep in ebuild.provided_runtime_deps %}
        # * {{ dep }}
            {%- endfor %}
        {%- endif %}
        {%- for dep in ebuild.runtime_deps %}
        "{{ dep }}",
        {%- endfor %}
    ],
    {%- endif %}
    visibility = ["@//bazel:internal"],
)

replace_runtime_deps(
    name = "{{ ebuild.version }}_including_provided",
    binpkg = ":{{ ebuild.version }}",
    runtime_deps = [
        {%- for dep in ebuild.runtime_deps %}
        "{{ dep }}_including_provided",
        {%- endfor %}
        {%- for dep in ebuild.provided_runtime_deps %}
        "{{ dep }}_including_provided",
        {%- endfor %}
    ],
    visibility = ["@//bazel:internal"],
)

{% else -%}
{% if ebuild.host_build_deps -%}
sdk_install_deps(
    name = "{{ ebuild.version }}_host_deps",
    out = "{{ ebuild.basename }}_host_deps",
    base = "{{ ebuild.sdk }}",
    overlays = "{{ host_overlay_set }}",
    target_deps = [
        {%- if ebuild.provided_host_build_deps %}
        # The following packages are provided by the SDK:
            {%- for dep in ebuild.provided_host_build_deps %}
        # * {{ dep }}
            {%- endfor %}
        {%- endif %}
        {%- for dep in ebuild.host_build_deps %}
        "{{ dep }}",
        {%- endfor %}
    ],
    install_strategy = select({
        "@//bazel/portage:binpkg-cache-fast": "fast",
        "//conditions:default": "slow",
    }),
    visibility = ["//visibility:private"],
)
{%- else -%}
alias(
    name = "{{ ebuild.version }}_host_deps",
    actual = "{{ ebuild.sdk }}",
    visibility = ["//visibility:private"],
)
{%- endif %}

{% if ebuild.target_build_deps -%}
sdk_install_deps(
    name = "{{ ebuild.version }}_deps",
    out = "{{ ebuild.basename }}_deps",
    base = "{{ ebuild.version }}_host_deps",
    {%- if target_board %}
    board = "{{ target_board }}",
    {%- endif %}
    overlays = "{{ target_overlay_set }}",
    target_deps = [
        {%- for dep in ebuild.target_build_deps %}
        "{{ dep }}",
        {%- endfor %}
    ],
    install_strategy = select({
        "@//bazel/portage:binpkg-cache-fast": "fast",
        "//conditions:default": "slow",
    }),
    visibility = ["//visibility:private"],
)
{%- else -%}
alias(
    name = "{{ ebuild.version }}_deps",
    actual = "{{ ebuild.version }}_host_deps",
    visibility = ["//visibility:private"],
)
{%- endif %}

{% if ebuild.target_test_deps -%}
sdk_install_deps(
    name = "{{ ebuild.version }}_test_deps",
    out = "{{ ebuild.basename }}_test_deps",
    base = "{{ ebuild.version }}_host_deps",
    {%- if target_board %}
    board = "{{ target_board }}",
    {%- endif %}
    overlays = "{{ target_overlay_set }}",
    target_deps = [
        {%- for dep in ebuild.target_test_deps %}
        "{{ dep }}",
        {%- endfor %}
    ],
    install_strategy = select({
        "@//bazel/portage:binpkg-cache-fast": "fast",
        "//conditions:default": "slow",
    }),
    visibility = ["//visibility:private"],
)
{%- else -%}
alias(
    name = "{{ ebuild.version }}_test_deps",
    actual = "{{ ebuild.version }}_host_deps",
    visibility = ["//visibility:private"],
)
{%- endif %}

{%- for suffix in ["","_hermetic_test_package"] %}
string_flag(
    name = "{{ ebuild.version }}{{ suffix }}_prebuilt",
    build_setting_default = "",
    visibility = ["@//bazel:internal"],
)

ebuild(
    name = "{{ ebuild.version }}{{ suffix }}",
    {%- if suffix %}
    suffix = "{{ suffix }}",
    {%- endif %}
    {{ self::ebuild_args(ebuild=ebuild, suffix=suffix) }}
    prebuilt = ":{{ ebuild.version }}{{ suffix }}_prebuilt",
    visibility = ["@//bazel:internal"],
)

replace_runtime_deps(
    name = "{{ ebuild.version }}{{ suffix }}_including_provided",
    binpkg = ":{{ ebuild.version }}",
    runtime_deps = [
        {%- for dep in ebuild.runtime_deps %}
        "{{ dep }}_including_provided",
        {%- endfor %}
        {%- for dep in ebuild.provided_runtime_deps %}
        "{{ dep }}_including_provided",
        {%- endfor %}
    ],
    visibility = ["@//bazel:internal"],
)

ebuild_debug(
    name = "{{ ebuild.version }}{{ suffix }}_debug",
    {%- if suffix %}
    suffix = "{{ suffix }}",
    {%- endif %}
    {{ self::ebuild_args(ebuild=ebuild, suffix=suffix) }}
    visibility = ["@//bazel:internal"],
)
{% endfor -%}
{% endif -%}

{% if target_board -%}
ebuild_install(
    name = "{{ ebuild.version }}_install",
    ebuild = "{{ ebuild.ebuild_name }}",
    category = "{{ebuild.category}}",
    board = "{{ target_board }}",
    packages = [
        {%- for dep in ebuild.install_set %}
        "{{ dep }}",
        {%- endfor %}
    ],
    visibility = ["@//bazel:internal"],
)
{% endif -%}

{% if target_board -%}
ebuild_install_list(
    name = "{{ ebuild.version }}_install_list",
    ebuild = "{{ ebuild.ebuild_name }}",
    category = "{{ebuild.category}}",
    board = "{{ target_board }}",
    packages = [
        {%- for dep in ebuild.install_set %}
        "{{ dep }}",
        {%- endfor %}
    ],
    visibility = ["@//bazel:internal"],
)
{% endif -%}

ebuild_test(
    name = "{{ ebuild.version }}_test",
    {{ self::ebuild_args(ebuild=ebuild, sdk_suffix="_test_deps") }}
    # Bazel sandbox interferes with restoring permissions in durable trees.
    tags = ["no-sandbox"],
    visibility = ["@//bazel:internal"],
)

ebuild_compare_package_test(
    name = "{{ ebuild.version }}_hermetic_test",
    packages = [
        ":{{ ebuild.version }}",
        ":{{ ebuild.version }}_hermetic_test_package",
    ],
    size="small",
)

test_suite(
    name = "{{ ebuild.version }}_package_set_hermetic_test",
    tests = [
        {%- for dep in ebuild.install_set %}
        "{{ dep }}_hermetic_test",
        {%- endfor %}
    ],
    visibility = ["@//bazel:internal"],
)

package_set(
    name = "{{ ebuild.version }}_package_set",
    deps = [
        {%- for dep in ebuild.install_set %}
        "{{ dep }}",
        {%- endfor %}
    ],
    visibility = ["@//bazel:internal"],
)

{% endfor %}
{%- for failure in failures %}
string_flag(
    name = "{{ failure.version }}_prebuilt",
    build_setting_default = "",
    visibility = ["@//bazel:internal"],
)

always_fail(
    name = "{{ failure.version }}",
    message = "\n--\nError analyzing ebuild!\ntarget: @" + repository_name() +
              "/" + package_name() + "\nebuild: {{ failure.ebuild_name }}\n\n" +
              """{{ failure.error }}\n--""",
    visibility = ["@//bazel:internal"],
)

alias(
    name = "{{ failure.version }}_hermetic_test_package",
    actual = "{{ failure.version }}",
    visibility = ["@//bazel:internal"],
)

ebuild_compare_package_test(
    name = "{{ failure.version }}_hermetic_test",
    packages = [
        ":{{ failure.version }}",
        ":{{ failure.version }}_hermetic_test_package",
    ],
    size="small",
)
{% endfor %}
