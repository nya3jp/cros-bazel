From 233999435a215daa11161423817e26d2869b7f86 Mon Sep 17 00:00:00 2001
From: Raul E Rangel <rrangel@chromium.org>
Date: Fri, 22 Sep 2023 15:54:28 -0600
Subject: [PATCH] b/293714014 - Print extra logging in check_locale

We are deadlocking for some reason. Print out some status so we know
what's happening.

BUG=b:293714014
TEST=sudo emerge -av virtual/os-headers and see logs printed to stdout

Change-Id: Ia91fb14c2e61abd56e03ef74bdf0dfe920adf15c
---
 usr/PYTHON_LIBDIR/PYTHON_VERSION/site-packages/portage/util/locale.py | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)

diff --git a/usr/PYTHON_LIBDIR/PYTHON_VERSION/site-packages/portage/util/locale.py b/usr/PYTHON_LIBDIR/PYTHON_VERSION/site-packages/portage/util/locale.py
index 5b09945d66..e3e01651f0 100644
--- a/usr/PYTHON_LIBDIR/PYTHON_VERSION/site-packages/portage/util/locale.py
+++ b/usr/PYTHON_LIBDIR/PYTHON_VERSION/site-packages/portage/util/locale.py
@@ -11,7 +11,9 @@ from __future__ import absolute_import, unicode_literals
 import locale
 import logging
 import os
+import subprocess
 import textwrap
+import threading
 import traceback
 
 import portage
@@ -100,17 +102,31 @@ def check_locale(silent=False, env=None):
 		except KeyError:
 			pass
 
+	print("check_locale(%d): Checking locale" % (threading.get_native_id()), flush=True)
+
 	pid = os.fork()
 	if pid == 0:
+		import faulthandler
 		try:
+			print("check_locale_inner(%d): I'm alive" % (threading.get_native_id()), flush=True)
+
+			# exit=True exit's with 0 which isn't what we want :/
+			faulthandler.dump_traceback_later(60)
+
+			subprocess.run(['/bin/bash', '-c', 'data="$(echo "---"; ps fx)"; echo "$data"'])
+
 			if env is not None:
 				try:
+					print("check_locale_inner(%d): Setting locale to %s" % (threading.get_native_id(), mylocale), flush=True)
 					locale.setlocale(locale.LC_CTYPE,
 						portage._native_string(mylocale))
 				except locale.Error:
 					os._exit(2)
 
+			print("check_locale_inner(%d): Checking locale, silent: %s" % (threading.get_native_id(), silent), flush=True)
 			ret = _check_locale(silent)
+
+			print("check_locale_inner(%d): ret=%d" % (threading.get_native_id(), ret), flush=True)
 			if ret is None:
 				os._exit(2)
 			else:
@@ -119,6 +135,7 @@ def check_locale(silent=False, env=None):
 			traceback.print_exc()
 			os._exit(2)
 
+	print("check_locale(%d): Waiting for pid %d" % (threading.get_native_id(), pid), flush=True)
 	pid2, ret = os.waitpid(pid, 0)
 	assert pid == pid2
 	pyret = None
@@ -126,9 +143,13 @@ def check_locale(silent=False, env=None):
 		ret = os.WEXITSTATUS(ret)
 		if ret != 2:
 			pyret = ret == 0
+	elif os.WIFSIGNALED(ret):
+		sig = os.WTERMSIG(ret)
+		raise Exception("check_locale(%d): sig=%d" % (threading.get_native_id(), sig))
 
 	if env is not None:
 		_check_locale_cache[mylocale] = pyret
+	print("check_locale(%d): ret=%s" % (threading.get_native_id(), pyret), flush=True)
 	return pyret
 
 
-- 
2.42.0.582.g8ccd20d70d-goog

