# Copyright 2022 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

load("//bazel/portage/build_defs:sdk.bzl", "sdk_from_archive", "sdk_update")
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")

pkg_tar(
    name = "extra_tarball",
    srcs = [
        "//bazel/portage/sdk/etc",
        "//bazel/portage/sdk/run/lock",
        "//bazel/portage/sdk/usr/bin",
        "//bazel/portage/sdk/usr/lib64",
        "//bazel/portage/sdk/usr/src",
    ],
    extension = "tar.gz",
    visibility = ["//bazel:internal"],
)

# TODO(b/272275535): Delete all this once platform2_test.py is working
# This is not included in the extra_tarball because the `sdk` rule will
# clear out /mnt/host before generating the layer, so we lose this.
# Instead we inject this as a src file to the ebuild targets.
pkg_tar(
    name = "meson_test_disable_hack",
    srcs = [
        "//bazel/portage/sdk/mnt/host/source/src/platform2/common-mk:fake_meson_test",
    ],
    extension = "tar",
    visibility = ["//bazel:internal"],
)

# TODO(b/272275535): Delete all this once platform2_test.py is working
# This is not included in the extra_tarball because the `sdk` rule will
# clear out /mnt/host before generating the layer, so we lose this.
# Instead we inject this as a src file to the ebuild targets.
pkg_tar(
    name = "platform2_test_hack",
    srcs = [
        "//bazel/portage/sdk/mnt/host/source/src/platform2/common-mk:modified_platform2_test",
    ],
    extension = "tar",
    visibility = ["//bazel:internal"],
)

bool_flag(
    name = "new-sdk",
    build_setting_default = True,
)

config_setting(
    name = "new-sdk-enabled",
    flag_values = {
        ":new-sdk": "True",
    },
)

sdk_from_archive(
    name = "sdk_from_archive",
    src = select({
        ":new-sdk-enabled": "@files//:cros-sdk-2023.04.05.144808",
        "//conditions:default": "@files//:cros-sdk-2022.08.25.153812",
    }),
    progress_message = "Extracting bootstrap SDK tarball",
    # This rule just extracts an archive, do not bother dispatching to remotes.
    tags = ["no-remote"],
    visibility = ["//bazel:internal"],
)

# The stage1 bootstrap SDK.
# sdk_update will monkey patch portage and get the SDK setup so we can perform
# rootless builds.
sdk_update(
    name = "stage1",
    base = ":sdk_from_archive",
    extra_tarballs = [
        ":extra_tarball",
    ],
    visibility = ["@//bazel:internal"],
)
