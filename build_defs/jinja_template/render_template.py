# Copyright 2024 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""A binary to render jinja2 templates."""

import json
import os
import pathlib
import sys

import jinja2
from python.runfiles import runfiles


_COPYRIGHT = """{comment} Copyright 2024 The ChromiumOS Authors
{comment} Use of this source code is governed by a BSD-style license that can be
{comment} found in the LICENSE file."""

_AUTOGENERATED = """{comment} AUTO-GENERATED FILE. DO NOT EDIT.
{comment} To update, run:
{comment} bazel run {label}"""


class TemplateError(Exception):
    """An exception raised by a template"""


class RunfilesLoader(jinja2.FileSystemLoader):
    """Loads templates from runfiles."""

    def __init__(self):
        self.execroot = pathlib.Path.cwd().parent
        self.runfiles_dir = pathlib.Path(os.environ["RUNFILES_DIR"])

        self.runfiles = runfiles.Create()
        # We only support absolute paths, since we do runfiles on all relative
        # paths to convert them into absolute ones.
        super().__init__(searchpath=["/"], followlinks=True)

    def get_source(self, environment, template):
        if os.path.isabs(template):
            absolute = template
        else:
            # Since the templates are not part of the data attribute, they
            # aren't placed in RUNFILES_DIR/_main/foo, but instead in
            # execroot/_main/foo
            orig = pathlib.Path(self.runfiles.Rlocation(template))
            absolute = str(self.execroot / orig.relative_to(self.runfiles_dir))

        if not os.path.isfile(absolute):
            raise FileNotFoundError(f"Unable to find runfile {template}")
        return super().get_source(environment=environment, template=absolute)


def template_error(fmt, *args, **kwargs):
    raise TemplateError(fmt.format(*args, **kwargs))


def main(
    template: pathlib.Path,
    vars_file: pathlib.Path,
    out: pathlib.Path,
    label: str,
):
    vars_values = json.loads(vars_file.read_text())

    env = jinja2.Environment(
        loader=RunfilesLoader(),
        # This isn't HTML. We don't need HTML autoescaping.
        autoescape=False,
        lstrip_blocks=True,
        trim_blocks=True,
        keep_trailing_newline=True,
        undefined=jinja2.StrictUndefined,
    )
    env.globals.update(
        fail=template_error,
        pathlib=pathlib,
        copyright=lambda comment="#": _COPYRIGHT.format(comment=comment),
        autogenerated=lambda comment="#": _AUTOGENERATED.format(
            comment=comment, label=label
        ),
    )
    template = env.get_template(str(template.absolute()))
    out.write_text(template.render(**vars_values))


if __name__ == "__main__":
    main(
        template=pathlib.Path(sys.argv[1]),
        vars_file=pathlib.Path(sys.argv[2]),
        out=pathlib.Path(sys.argv[3]),
        label=sys.argv[4],
    )
