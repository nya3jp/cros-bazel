From c9fc57be6dfb07e3772524800c476ff1d76ec239 Mon Sep 17 00:00:00 2001
From: Matt Stark <msta@google.com>
Date: Fri, 14 Jul 2023 13:56:59 +1000
Subject: [PATCH 1/2] Run rustfmt

---
 src/dynamic.rs | 55 ++++++++++++++++++++++++++++++++++++++------------
 1 file changed, 42 insertions(+), 13 deletions(-)

diff --git a/src/dynamic.rs b/src/dynamic.rs
index 0c72d23..a450cac 100644
--- a/src/dynamic.rs
+++ b/src/dynamic.rs
@@ -1,10 +1,13 @@
 use core::fmt;
-use {P32, P64};
 use zero::Pod;
+use {P32, P64};
 
 #[derive(Debug)]
 #[repr(C)]
-pub struct Dynamic<P> where Tag_<P>: fmt::Debug {
+pub struct Dynamic<P>
+where
+    Tag_<P>: fmt::Debug,
+{
     tag: Tag_<P>,
     un: P,
 }
@@ -64,22 +67,48 @@ macro_rules! impls {
 
             pub fn get_val(&self) -> Result<$p, &'static str> {
                 match self.get_tag()? {
-                    Tag::Needed | Tag::PltRelSize | Tag::RelaSize | Tag::RelaEnt | Tag::StrSize |
-                    Tag::SymEnt | Tag::SoName | Tag::RPath | Tag::RelSize | Tag::RelEnt | Tag::PltRel |
-                    Tag::InitArraySize | Tag::FiniArraySize | Tag::RunPath | Tag::Flags |
-                    Tag::PreInitArraySize | Tag::Flags1 | Tag::OsSpecific(_) |
-                    Tag::ProcessorSpecific(_) => Ok(self.un),
+                    Tag::Needed
+                    | Tag::PltRelSize
+                    | Tag::RelaSize
+                    | Tag::RelaEnt
+                    | Tag::StrSize
+                    | Tag::SymEnt
+                    | Tag::SoName
+                    | Tag::RPath
+                    | Tag::RelSize
+                    | Tag::RelEnt
+                    | Tag::PltRel
+                    | Tag::InitArraySize
+                    | Tag::FiniArraySize
+                    | Tag::RunPath
+                    | Tag::Flags
+                    | Tag::PreInitArraySize
+                    | Tag::Flags1
+                    | Tag::OsSpecific(_)
+                    | Tag::ProcessorSpecific(_) => Ok(self.un),
                     _ => Err("Invalid value"),
                 }
             }
 
             pub fn get_ptr(&self) -> Result<$p, &'static str> {
                 match self.get_tag()? {
-                    Tag::Pltgot | Tag::Hash | Tag::StrTab | Tag::SymTab | Tag::Rela | Tag::Init | Tag::Fini |
-                    Tag::Rel | Tag::Debug | Tag::JmpRel | Tag::InitArray | Tag::FiniArray |
-                    Tag::PreInitArray | Tag::SymTabShIndex  | Tag::OsSpecific(_) | Tag::ProcessorSpecific(_)
-                    => Ok(self.un),
-                     _ => Err("Invalid ptr"),
+                    Tag::Pltgot
+                    | Tag::Hash
+                    | Tag::StrTab
+                    | Tag::SymTab
+                    | Tag::Rela
+                    | Tag::Init
+                    | Tag::Fini
+                    | Tag::Rel
+                    | Tag::Debug
+                    | Tag::JmpRel
+                    | Tag::InitArray
+                    | Tag::FiniArray
+                    | Tag::PreInitArray
+                    | Tag::SymTabShIndex
+                    | Tag::OsSpecific(_)
+                    | Tag::ProcessorSpecific(_) => Ok(self.un),
+                    _ => Err("Invalid ptr"),
                 }
             }
         }
@@ -134,7 +163,7 @@ macro_rules! impls {
                 self.as_tag().fmt(f)
             }
         }
-    }
+    };
 }
 
 impls!(P32);
-- 
2.41.0.255.g8b1d071c50-goog

