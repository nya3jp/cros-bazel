# Copyright 2023 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_test")
load("//bazel/bash:defs.bzl", "sh_runfiles_binary", "sh_runfiles_test")
load("//bazel/platforms:platforms.bzl", "HOST_PLATFORM_MUSL")
load(":musl_transition.bzl", "musl_transition")

rust_binary(
    name = "elf_interpreter",
    srcs = glob(
        ["src/*.rs"],
    ),
    rustc_flags = [
        # Substitute libc's main for our main.
        "-C",
        "link_args=-Wl,--wrap=main",
        # Statically link the binary to ensure that we don't depend on anything
        # on the host system.
        "-C",
        "target-feature=+crt-static",
        "-C",
        "relocation-model=static",
        # Optimize relocations
        "-C",
        "link-args=-Wl,-z,combreloc",
        # Make the relocations read-only for security reasons
        "-C",
        "link-args=-Wl,-z,relro",
        # Disallow undefined symbols at compile time.
        "-C",
        "link-args=-Wl,-z,defs",
    ],
    # glibc doesn't like statically linking libc.
    target_compatible_with = HOST_PLATFORM_MUSL.constraints,
    deps = [
        "//bazel/rust/runfiles",
        "@alchemy_crates//:anyhow",
        "@alchemy_crates//:elfloader",
        "@alchemy_crates//:libc",
    ],
)

musl_transition(
    name = "elf_interpreter_musl",
    actual = "elf_interpreter",
)

# We can't do what we normally do and use crate = ":elf_interpreter" because of
# the target_compatible_with constraint.
# Thus, we just build a subset of elf_interpreter that is compatible with HOST.
rust_test(
    name = "serialize_test",
    size = "small",
    srcs = ["src/serialize.rs"],
    deps = ["@alchemy_crates//:anyhow"],
)

cc_binary(
    name = "use_interp_test_cc",
    srcs = ["use_interp_test.cc"],
    data = [
        ":elf_interpreter_musl",
        "//bazel/module_extensions/toolchains/files/primordial:x86_64-pc-linux-gnu_runtime_files",
    ],
    features = [
        "-prebuilt_elfloader",
    ],
    linkopts = [
        "-Wl,-dynamic-linker=bazel/module_extensions/toolchains/elf_interpreter/elf_interpreter",
    ],
)

sh_runfiles_test(
    name = "use_interp_test",
    size = "small",
    src = "use_interp_test.sh",
    data = [":use_interp_test_cc"],
)

sh_runfiles_binary(
    name = "install",
    src = "install.sh",
    data = [":elf_interpreter_musl"],
)
